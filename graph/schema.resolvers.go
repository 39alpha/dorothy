package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/39alpha/dorothy/core"
	"github.com/39alpha/dorothy/core/model"
)

// ID is the resolver for the id field.
func (r *datasetResolver) ID(ctx context.Context, obj *model.Dataset) (int, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Organization is the resolver for the organization field.
func (r *datasetResolver) Organization(ctx context.Context, obj *model.Dataset) (*model.Organization, error) {
	input := model.GetOrganization{ID: &obj.OrganizationID}
	return core.GetOrganization(ctx, r.config, r.db, &input)
}

// Manifest is the resolver for the manifest field.
func (r *datasetResolver) Manifest(ctx context.Context, obj *model.Dataset) (*model.Manifest, error) {
	return core.GetManifest(ctx, r.config, r.db, obj)
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input model.NewOrganization) (*model.Organization, error) {
	return core.CreateOrganization(ctx, r.config, r.db, &input)
}

// CreateDataset is the resolver for the createDataset field.
func (r *mutationResolver) CreateDataset(ctx context.Context, input model.NewDataset) (*model.Dataset, error) {
	return core.CreateDataset(ctx, r.config, r.db, &input)
}

// ID is the resolver for the id field.
func (r *organizationResolver) ID(ctx context.Context, obj *model.Organization) (int, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Datasets is the resolver for the datasets field.
func (r *organizationResolver) Datasets(ctx context.Context, obj *model.Organization) ([]*model.Dataset, error) {
	input := model.GetDatasets{OrganizationID: obj.ID}
	return core.ListDatasets(ctx, r.config, r.db, &input)
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*model.Organization, error) {
	return core.ListOrganizations(ctx, r.config, r.db)
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, input *model.GetOrganization) (*model.Organization, error) {
	return core.GetOrganization(ctx, r.config, r.db, input)
}

// Datasets is the resolver for the datasets field.
func (r *queryResolver) Datasets(ctx context.Context, input *model.GetDatasets) ([]*model.Dataset, error) {
	return core.ListDatasets(ctx, r.config, r.db, input)
}

// Dataset is the resolver for the dataset field.
func (r *queryResolver) Dataset(ctx context.Context, input *model.GetDataset) (*model.Dataset, error) {
	return core.GetDataset(ctx, r.config, r.db, input)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return core.GetUsers(ctx, r.config, r.db)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input *model.GetUser) (*model.User, error) {
	return core.GetUser(ctx, r.config, r.db, input)
}

// ID is the resolver for the id field.
func (r *getDatasetResolver) ID(ctx context.Context, obj *model.GetDataset, data string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// OrganizationID is the resolver for the organizationId field.
func (r *getDatasetResolver) OrganizationID(ctx context.Context, obj *model.GetDataset, data string) error {
	panic(fmt.Errorf("not implemented: OrganizationID - organizationId"))
}

// OrganizationID is the resolver for the organizationId field.
func (r *getDatasetsResolver) OrganizationID(ctx context.Context, obj *model.GetDatasets, data string) error {
	panic(fmt.Errorf("not implemented: OrganizationID - organizationId"))
}

// ID is the resolver for the id field.
func (r *getOrganizationResolver) ID(ctx context.Context, obj *model.GetOrganization, data *int) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// OrganizationID is the resolver for the organizationId field.
func (r *newDatasetResolver) OrganizationID(ctx context.Context, obj *model.NewDataset, data string) error {
	panic(fmt.Errorf("not implemented: OrganizationID - organizationId"))
}

// Dataset returns DatasetResolver implementation.
func (r *Resolver) Dataset() DatasetResolver { return &datasetResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Organization returns OrganizationResolver implementation.
func (r *Resolver) Organization() OrganizationResolver { return &organizationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// GetDataset returns GetDatasetResolver implementation.
func (r *Resolver) GetDataset() GetDatasetResolver { return &getDatasetResolver{r} }

// GetDatasets returns GetDatasetsResolver implementation.
func (r *Resolver) GetDatasets() GetDatasetsResolver { return &getDatasetsResolver{r} }

// GetOrganization returns GetOrganizationResolver implementation.
func (r *Resolver) GetOrganization() GetOrganizationResolver { return &getOrganizationResolver{r} }

// NewDataset returns NewDatasetResolver implementation.
func (r *Resolver) NewDataset() NewDatasetResolver { return &newDatasetResolver{r} }

type datasetResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type organizationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type getDatasetResolver struct{ *Resolver }
type getDatasetsResolver struct{ *Resolver }
type getOrganizationResolver struct{ *Resolver }
type newDatasetResolver struct{ *Resolver }
